// Generated by CoffeeScript 1.12.7
var Alert, AuthPanel, Button, ButtonGroup, ButtonInput, Col, Glyphicon, Input, LoginForm, Panel, Recaptcha, Row, TeamManagementForm, update;

Input = ReactBootstrap.Input;

Row = ReactBootstrap.Row;

Col = ReactBootstrap.Col;

Button = ReactBootstrap.Button;

Panel = ReactBootstrap.Panel;

Glyphicon = ReactBootstrap.Glyphicon;

ButtonInput = ReactBootstrap.ButtonInput;

ButtonGroup = ReactBootstrap.ButtonGroup;

Alert = ReactBootstrap.Alert;

update = React.addons.update;

Recaptcha = ReactRecaptcha;

LoginForm = React.createClass({displayName: "LoginForm",
  render: function() {
    var formButton, generateCountries, generateRecaptcha, lockGlyph, q, registrationForm, showEmailFilter, showGroupMessage, showOrHide, userGlyph;
    userGlyph = React.createElement(Glyphicon, {
      "glyph": "user"
    });
    lockGlyph = React.createElement(Glyphicon, {
      "glyph": "lock"
    });
    formButton = this.props.status === "Login" ? q = "'" : void 0;
    if (this.props.status === "Reset") {
      return React.createElement(Panel, null, React.createElement("form", {
        "onSubmit": this.props.onPasswordReset
      }, React.createElement("p", null, React.createElement("i", null, "A password reset link will be sent the user", q, "s email.")), React.createElement(Input, {
        "type": "text",
        "name": "username",
        "valueLink": this.props.username,
        "addonBefore": userGlyph,
        "placeholder": "Username",
        "required": true
      }), React.createElement("div", {
        "style": {
          height: "70px"
        }
      }), React.createElement(Row, null, React.createElement(Col, {
        "md": 6
      }, React.createElement(ButtonInput, {
        "type": "submit"
      }, "Reset Password")), React.createElement(Col, {
        "md": 6
      }, React.createElement("span", {
        "className": "pull-right pad"
      }, "Go back to ", React.createElement("a", {
        "onClick": this.props.setPage.bind(null, "Login")
      }, "Login"), ".")))));
    } else {
      showGroupMessage = (function() {
        return React.createElement(Alert, {
          "bsStyle": "info"
        }, "You are registering as a member of ", React.createElement("strong", null, this.props.groupName), ".");
      }).bind(this);
      showEmailFilter = (function() {
        return React.createElement(Alert, {
          "bsStyle": "warning"
        }, "You can register provided you have an email for one of these domains: ", React.createElement("strong", null, this.props.emailFilter.join(", ")), ".");
      }).bind(this);
      generateRecaptcha = (function() {
        if (this.props.reCAPTCHA_public_key) {
          return React.createElement(Recaptcha, {
            "sitekey": this.props.reCAPTCHA_public_key,
            "verifyCallback": this.props.onRecaptchaSuccess,
            "expiredCallback": this.props.onRecaptchaExpire,
            "render": "explicit"
          });
        }
      }).bind(this);
      showOrHide = (function(prop, inputName) {
        var inputs, show;
        inputs = {
          url: false,
          grade: false,
          teacherlevel: false,
          subjectstaught: false,
          schoolcountry: false,
          residencecountry: true,
          affiliation: true,
          zipcode: false,
          studentOnly: false,
          teacherOnly: false,
          referrer: false
        };
        switch (this.props.usertype.value) {
          case "student":
            inputs.url = true;
            inputs.grade = true;
            inputs.schoolcountry = true;
            inputs.zipcode = true;
            inputs.studentOnly = true;
            inputs.referrer = true;
            break;
          case "college":
            inputs.schoolcountry = true;
            inputs.zipcode = true;
            break;
          case "teacher":
            inputs.teacherlevel = true;
            inputs.subjectstaught = true;
            inputs.schoolcountry = true;
            inputs.zipcode = true;
            inputs.teacherOnly = true;
            inputs.referrer = true;
            break;
          case "other":
            break;
          default:
            inputs.residencecountry = false;
            inputs.affiliation = false;
        }
        show = inputs[inputName];
        if (prop === "class") {
          if (show) {
            return 'show';
          } else {
            return 'hide';
          }
        } else if (prop === "disabled") {
          if (show) {
            return false;
          } else {
            return true;
          }
        }
      }).bind(this);
      generateCountries = (function() {
        var abbrev, country, countryList, results;
        countryList = {
          "United States": "US",
          "Canada": "CA",
          "Afghanistan": "AF",
          "Albania": "AL",
          "Algeria": "DZ",
          "Andorra": "AD",
          "Angola": "AO",
          "Antigua and Barbuda": "AG",
          "Argentina": "AR",
          "Armenia": "AM",
          "Aruba": "AW",
          "Australia": "AU",
          "Austria": "AT",
          "Azerbaijan": "AZ",
          "Bahamas, The": "BS",
          "Bahrain": "BH",
          "Bangladesh": "BD",
          "Barbados": "BB",
          "Belarus": "BY",
          "Belgium": "BE",
          "Belize": "BZ",
          "Benin": "BJ",
          "Bhutan": "BT",
          "Bolivia": "BO",
          "Bosnia and Herzegovina": "BA",
          "Botswana": "BW",
          "Brazil": "BR",
          "Brunei": "BN",
          "Bulgaria": "BG",
          "Burkina Faso": "BF",
          "Burma": "MM",
          "Burundi": "BI",
          "Cabo Verde": "CV",
          "Cambodia": "KH",
          "Cameroon": "CM",
          "Central African Republic": "CF",
          "Chad": "TD",
          "Chile": "CL",
          "China": "CN",
          "Colombia": "CO",
          "Comoros": "KM",
          "Congo (Brazzaville)": "CG",
          "Congo (Kinshasa)": "CD",
          "Costa Rica": "CR",
          "CÃ´te d'Ivoire": "CI",
          "Croatia": "HR",
          "Cuba": "CU",
          "Curacao": "CW",
          "Cyprus": "CY",
          "Czechia": "CZ",
          "Denmark": "DK",
          "Djibouti": "DJ",
          "Dominica": "DM",
          "Dominican Republic": "DO",
          "Ecuador": "EC",
          "Egypt": "EG",
          "El Salvador": "SV",
          "Equatorial Guinea": "GQ",
          "Eritrea": "ER",
          "Estonia": "EE",
          "Eswatini": "SZ",
          "Ethiopia": "ET",
          "Fiji": "FJ",
          "Finland": "FI",
          "France": "FR",
          "Gabon": "GA",
          "Gambia, The": "GM",
          "Georgia": "GE",
          "Germany": "DE",
          "Ghana": "GH",
          "Greece": "GR",
          "Grenada": "GD",
          "Guatemala": "GT",
          "Guinea": "GN",
          "Guinea-Bissau": "GW",
          "Guyana": "GY",
          "Haiti": "HT",
          "Holy See": "VA",
          "Honduras": "HN",
          "Hong Kong": "HK",
          "Hungary": "HU",
          "Iceland": "IS",
          "India": "IN",
          "Indonesia": "ID",
          "Iran": "IR",
          "Iraq": "IQ",
          "Ireland": "IE",
          "Israel": "IL",
          "Italy": "IT",
          "Jamaica": "JM",
          "Japan": "JP",
          "Jordan": "JO",
          "Kazakhstan": "KZ",
          "Kenya": "KE",
          "Kiribati": "KI",
          "Korea, North": "KP",
          "Korea, South": "KR",
          "Kosovo": "XK",
          "Kuwait": "KW",
          "Kyrgyzstan": "KG",
          "Laos": "LA",
          "Latvia": "LV",
          "Lebanon": "LB",
          "Lesotho": "LS",
          "Liberia": "LR",
          "Libya": "LY",
          "Liechtenstein": "LI",
          "Lithuania": "LT",
          "Luxembourg": "LU",
          "Macau": "MO",
          "Macedonia": "MK",
          "Madagascar": "MG",
          "Malawi": "MW",
          "Malaysia": "MY",
          "Maldives": "MV",
          "Mali": "ML",
          "Malta": "MT",
          "Marshall Islands": "MH",
          "Mauritania": "MR",
          "Mauritius": "MU",
          "Mexico": "MX",
          "Micronesia": "FM",
          "Moldova": "MD",
          "Monaco": "MC",
          "Mongolia": "MN",
          "Montenegro": "ME",
          "Morocco": "MA",
          "Mozambique": "MZ",
          "Namibia": "NA",
          "Nauru": "NR",
          "Nepal": "NP",
          "Netherlands": "NL",
          "New Zealand": "NZ",
          "Nicaragua": "NI",
          "Niger": "NE",
          "Nigeria": "NG",
          "Norway": "NO",
          "Oman": "OM",
          "Pakistan": "PK",
          "Palau": "PW",
          "Palestine": "PS",
          "Panama": "PA",
          "Papua New Guinea": "PG",
          "Paraguay": "PY",
          "Peru": "PE",
          "Philippines": "PH",
          "Poland": "PL",
          "Portugal": "PT",
          "Qatar": "QA",
          "Romania": "RO",
          "Russia": "RU",
          "Rwanda": "RW",
          "Saint Kitts and Nevis": "KN",
          "Saint Lucia": "LC",
          "Saint Vincent and the Grenadines": "VC",
          "Samoa": "WS",
          "San Marino": "SM",
          "Sao Tome and Principe": "ST",
          "Saudi Arabia": "SA",
          "Senegal": "SN",
          "Serbia": "RS",
          "Seychelles": "SC",
          "Sierra Leone": "SL",
          "Singapore": "SG",
          "Sint Maarten": "SX",
          "Slovakia": "SK",
          "Slovenia": "SI",
          "Solomon Islands": "SB",
          "Somalia": "SO",
          "South Africa": "ZA",
          "South Sudan": "SS",
          "Spain": "ES",
          "Sri Lanka": "LK",
          "Sudan": "SD",
          "Suriname": "SR",
          "Sweden": "SE",
          "Switzerland": "CH",
          "Syria": "SY",
          "Taiwan": "TW",
          "Tajikistan": "TJ",
          "Tanzania": "TZ",
          "Thailand": "TH",
          "Timor-Leste": "TL",
          "Togo": "TG",
          "Tonga": "TO",
          "Trinidad and Tobago": "TT",
          "Tunisia": "TN",
          "Turkey": "TR",
          "Turkmenistan": "TM",
          "Tuvalu": "TV",
          "Uganda": "UG",
          "Ukraine": "UA",
          "United Arab Emirates": "AE",
          "United Kingdom": "GB",
          "Uruguay": "UY",
          "Uzbekistan": "UZ",
          "Vanuatu": "VU",
          "Venezuela": "VE",
          "Vietnam": "VN",
          "Yemen": "YE",
          "Zambia": "ZM",
          "Zimbabwe": "ZW"
        };
        results = [];
        for (country in countryList) {
          abbrev = countryList[country];
          results.push(React.createElement("option", {
            "value": abbrev
          }, country));
        }
        return results;
      });
      registrationForm = this.props.status === "Register" ? React.createElement("div", null, React.createElement(Row, null, React.createElement("div", null, (this.props.groupName.length > 0 ? showGroupMessage() : React.createElement("span", null)), (this.props.emailFilter.length > 0 && !this.props.rid ? showEmailFilter() : React.createElement("span", null))), React.createElement(Col, {
        "md": 12
      }, React.createElement("br", null), React.createElement(Input, {
        "type": "email",
        "name": "email",
        "id": "email",
        "valueLink": this.props.email,
        "label": "E-mail *",
        "placeholder": "email@example.com",
        "required": true
      }))), React.createElement(Row, null, React.createElement(Col, {
        "md": 12
      }, React.createElement(Input, {
        "type": "select",
        "name": "usertype",
        "id": "usertype",
        "defaultValue": "",
        "label": "Status *",
        "required": true,
        "valueLink": this.props.usertype
      }, React.createElement("option", {
        "value": "",
        "disabled": true
      }, "-Select Category-"), React.createElement("option", {
        "value": "student"
      }, "Middle\x2FHigh School Student"), React.createElement("option", {
        "value": "teacher"
      }, "Teacher\x2FInstructor"), React.createElement("option", {
        "value": "college"
      }, "College Student"), React.createElement("option", {
        "value": "other"
      }, "Other")))), React.createElement(Row, null, React.createElement(Col, {
        "md": 6,
        "className": showOrHide('class', 'affiliation')
      }, React.createElement(Input, {
        "type": "text",
        "name": "affiliation",
        "id": "affiliation",
        "valueLink": this.props.affiliation,
        "label": (this.props.usertype.value === "other" ? "Organization Name *" : "School Name *"),
        "placeholder": "Example School, Pittsburgh, PA",
        "maxlength": "50",
        "required": true
      }), React.createElement("p", {
        "className": "help-block"
      }, "Your school or organization name may be visible to other users.")), React.createElement(Col, {
        "md": 6,
        "className": showOrHide('class', 'residencecountry')
      }, React.createElement(Input, {
        "type": "select",
        "name": "residencecountry",
        "id": "residencecountry",
        "defaultValue": "",
        "valueLink": this.props.residencecountry,
        "label": "Country/Region of Residence *",
        "placeholder": "Country of Residence",
        "required": true
      }, React.createElement("option", {
        "value": "",
        "disabled": true
      }, "-Select-"), generateCountries()))), React.createElement(Row, null, React.createElement(Col, {
        "md": 6,
        "className": showOrHide('class', 'url')
      }, React.createElement(Input, {
        "type": "text",
        "name": "url",
        "disabled": showOrHide('disabled', 'url'),
        "id": "url",
        "valueLink": this.props.url,
        "label": "School URL (optional)",
        "placeholder": "School URL"
      })), React.createElement(Col, {
        "md": 6,
        "className": showOrHide('class', 'grade')
      }, React.createElement(Input, {
        "type": "number",
        "name": "grade",
        "disabled": showOrHide('disabled', 'grade'),
        "id": "grade",
        "valueLink": this.props.grade,
        "label": "Your Current Grade/Year (1-12) *",
        "placeholder": "Your Current Grade/Year",
        "required": true
      }))), React.createElement(Row, null, React.createElement(Col, {
        "md": 6,
        "className": showOrHide('class', 'teacherlevel')
      }, React.createElement("label", null, "I teach *"), React.createElement(Input, {
        "type": "checkbox",
        "checkedLink": this.props.teacher_middleschool,
        "label": "Middle School"
      }), React.createElement(Input, {
        "type": "checkbox",
        "checkedLink": this.props.teacher_highschool,
        "label": "High School"
      }), React.createElement(Input, {
        "type": "checkbox",
        "checkedLink": this.props.teacher_afterschoolclub,
        "label": "After School or Club"
      }), React.createElement(Input, {
        "type": "checkbox",
        "checkedLink": this.props.teacher_homeschool,
        "label": "Home School"
      })), React.createElement(Col, {
        "md": 6,
        "className": showOrHide('class', 'subjectstaught')
      }, React.createElement(Input, {
        "type": "text",
        "name": "subjectstaught",
        "disabled": showOrHide('disabled', 'subjectstaught'),
        "id": "subjectstaught",
        "valueLink": this.props.subjectstaught,
        "label": "Subjects Taught *",
        "required": true
      }))), React.createElement(Row, null, React.createElement(Col, {
        "md": 6,
        "className": showOrHide('class', 'zipcode')
      }, React.createElement(Input, {
        "type": "text",
        "name": "zipcode",
        "disabled": showOrHide('disabled', 'zipcode'),
        "id": "zipcode",
        "valueLink": this.props.zipcode,
        "label": "School Zip Code/Postal Code *",
        "placeholder": "School Zipcode/Postal Code",
        "required": true
      })), React.createElement(Col, {
        "md": 6,
        "className": showOrHide('class', 'schoolcountry')
      }, React.createElement(Input, {
        "type": "select",
        "name": "schoolcountry",
        "disabled": showOrHide('disabled', 'schoolcountry'),
        "defaultValue": "",
        "id": "schoolcountry",
        "valueLink": this.props.schoolcountry,
        "label": "School Country *",
        "required": true
      }, React.createElement("option", {
        "value": "",
        "disabled": true
      }, "-Select-"), generateCountries()))), React.createElement(Row, {
        "className": showOrHide('class', 'referrer')
      }, React.createElement(Col, {
        "md": 12
      }, React.createElement(Input, {
        "className": showOrHide('disabled', 'referrer'),
        "type": "select",
        "name": "referrer",
        "defaultValue": "",
        "id": "referrer",
        "label": "How did you hear about picoCTF?",
        "valueLink": this.props.referrer
      }, React.createElement("option", {
        "value": "",
        "disabled": true
      }, "-Select-"), React.createElement("option", {
        "value": "socialmedia"
      }, "Social Media"), React.createElement("option", {
        "className": showOrHide('class', 'studentOnly'),
        "value": "friends"
      }, "Friends"), "\x3Coption ", React.createElement("option", {
        "className": showOrHide('class', 'studentOnly'),
        "value": "teacher"
      }, "Teacher"), "\x3Coption ", React.createElement("option", {
        "className": showOrHide('class', 'teacherOnly'),
        "value": "students"
      }, "Students"), "\x3Coption ", React.createElement("option", {
        "className": showOrHide('class', 'teacherOnly'),
        "value": "colleagues_groupemail"
      }, "Colleagues or group email")))), React.createElement(Row, null, React.createElement(Col, {
        "md": (this.props.gender.value === "other" ? 6 : 12)
      }, React.createElement(Input, {
        "type": "select",
        "id": "gender",
        "name": "gender",
        "defaultValue": "",
        "label": "Which gender identity do you most identify with?",
        "valueLink": this.props.gender
      }, React.createElement("option", {
        "value": ""
      }, "-Select-"), React.createElement("option", {
        "value": "woman"
      }, "Woman"), React.createElement("option", {
        "value": "man"
      }, "Man"), React.createElement("option", {
        "value": "transgenderwoman"
      }, "Transgender Woman"), React.createElement("option", {
        "value": "transgenderman"
      }, "Transgender Man"), React.createElement("option", {
        "value": "gfnc"
      }, "Gender Fluid\x2FNon-Conforming"), React.createElement("option", {
        "value": "other"
      }, "I prefer: (fill in:)"))), React.createElement(Col, {
        "md": 6,
        "className": (this.props.gender.value === "other" ? "show" : "hide")
      }, React.createElement("br", null), React.createElement(Input, {
        "type": "text",
        "name": "genderother",
        "disabled": (this.props.gender.value === "other" ? false : true),
        "id": "genderother",
        "valueLink": this.props.genderother,
        "label": "Gender prefer",
        "placeholder": ""
      }))), React.createElement(Row, null, React.createElement(Col, {
        "md": 12
      }, React.createElement(Input, {
        "type": "select",
        "name": "age",
        "id": "age",
        "defaultValue": "",
        "label": "What is your age? *",
        "valueLink": this.props.age,
        "required": true
      }, React.createElement("option", {
        "value": ""
      }, "-Select-"), React.createElement("option", {
        "value": "13-17"
      }, "I am between 13 and 17 years of age"), React.createElement("option", {
        "value": "18+"
      }, "I am 18 years of age or older")))), React.createElement(Row, {
        "className": (this.props.age.value === "13-17" ? "show" : "hide")
      }, React.createElement(Col, {
        "md": 12
      }, React.createElement("p", {
        "className": "help-block"
      }, "Parent or legal guardian must insert contact email address.  By inserting email address and finalizing\nregistration, parent\x2Flegal guardian is hereby consenting to their childâs registration under the Terms of\n Use, Privacy Statement and any applicable Competition Rules."), React.createElement(Input, {
        "type": "email",
        "name": "parentemail",
        "disabled": (this.props.age.value === "13-17" ? false : true),
        "id": "parentemail",
        "valueLink": this.props.parentemail,
        "label": "Parent's E-mail *",
        "required": true,
        "placeholder": "email@example.com"
      }))), React.createElement(Row, null, React.createElement(Col, {
        "md": 8
      }, generateRecaptcha()), React.createElement(Col, {
        "md": 4,
        "className": "text-right"
      }, React.createElement(ButtonInput, {
        "className": "btn-primary",
        "type": "submit"
      }, "Register")))) : React.createElement("span", null);
      return React.createElement(Panel, null, React.createElement("form", {
        "key": this.props.status,
        "onSubmit": (this.props.status === "Login" ? this.props.onLogin : this.props.onRegistration)
      }, React.createElement(Input, {
        "type": "text",
        "id": "username",
        "valueLink": this.props.username,
        "addonBefore": userGlyph,
        "label": "Username",
        "required": true
      }), React.createElement("p", {
        "className": (this.props.status === "Login" ? "hide" : "help-block")
      }, "Your username may be visible to other users.\nDo not include your real name or any other personal information."), React.createElement(Input, {
        "type": "password",
        "id": "password",
        "valueLink": this.props.password,
        "addonBefore": lockGlyph,
        "label": "Password",
        "required": true
      }), React.createElement(Row, null, React.createElement(Col, {
        "md": 6
      }, (this.props.status === "Register" ? React.createElement("span", {
        "className": "pad"
      }, "Go back to ", React.createElement("a", {
        "onClick": this.props.setPage.bind(null, "Login")
      }, "Login"), ".") : React.createElement("span", null, React.createElement(Button, {
        "type": "submit"
      }, "Login"), React.createElement(Button, {
        "id": "set-register",
        "onClick": this.props.setPage.bind(null, "Register")
      }, "Register")))), React.createElement(Col, {
        "md": 6
      }, React.createElement("a", {
        "className": "pad",
        "onClick": this.props.setPage.bind(null, "Reset")
      }, "Need to reset your password?"))), registrationForm));
    }
  }
});

TeamManagementForm = React.createClass({displayName: "TeamManagementForm",
  mixins: [React.addons.LinkedStateMixin],
  getInitialState: function() {
    return {
      team_name: "",
      team_password: ""
    };
  },
  onTeamRegistration: function(e) {
    e.preventDefault();
    if (!this.state.team_name || !this.state.team_password) {
      return apiNotify({
        status: 0,
        message: "Invalid team name or password."
      });
    } else {
      return apiCall("POST", "/api/team/create", {
        team_name: this.state.team_name,
        team_password: this.state.team_password
      }).done(function(resp) {
        switch (resp.status) {
          case 0:
            return apiNotify(resp);
          case 1:
            return document.location.href = "/profile";
        }
      });
    }
  },
  onTeamJoin: function(e) {
    e.preventDefault();
    return apiCall("POST", "/api/team/join", {
      team_name: this.state.team_name,
      team_password: this.state.team_password
    }).done(function(resp) {
      switch (resp.status) {
        case 0:
          return apiNotify(resp);
        case 1:
          return document.location.href = "/profile";
      }
    });
  },
  render: function() {
    var lockGlyph, towerGlyph;
    towerGlyph = React.createElement(Glyphicon, {
      "glyph": "tower"
    });
    lockGlyph = React.createElement(Glyphicon, {
      "glyph": "lock"
    });
    return React.createElement(Panel, null, React.createElement("p", null, "Your team name may be visible to other users. Do not include your real name or any other personal information.\nAlso, to avoid confusion on the scoreboard, you may not create a team that shares the same name as an existing user."), React.createElement("form", {
      "onSubmit": this.onTeamJoin
    }, React.createElement(Input, {
      "type": "text",
      "valueLink": this.linkState("team_name"),
      "addonBefore": towerGlyph,
      "label": "Team Name",
      "required": true
    }), React.createElement(Input, {
      "type": "password",
      "valueLink": this.linkState("team_password"),
      "addonBefore": lockGlyph,
      "label": "Team Password",
      "required": true
    }), React.createElement(Col, {
      "md": 6
    }, React.createElement("span", null, " ", React.createElement(Button, {
      "type": "submit"
    }, "Join Team"), React.createElement(Button, {
      "onClick": this.onTeamRegistration
    }, "Register Team"))), React.createElement(Col, {
      "md": 6
    }, React.createElement("a", {
      "href": "#",
      "onClick": (function() {
        return document.location.href = "/profile";
      })
    }, "Play as an individual."))));
  }
});

AuthPanel = React.createClass({displayName: "AuthPanel",
  mixins: [React.addons.LinkedStateMixin],
  getInitialState: function() {
    var params;
    params = $.deparam($.param.fragment());
    return {
      page: "Login",
      settings: {},
      gid: params.g,
      rid: params.r,
      status: params.status,
      groupName: "",
      captcha: "",
      eligibility: "eligible",
      regStats: {}
    };
  },
  componentWillMount: function() {
    if (this.state.status === "verified") {
      ga('send', 'event', 'Registration', 'Verification', 'Success');
      apiNotify({
        status: 1,
        message: "Your account has been successfully verified. Please login."
      });
    }
    if (this.state.gid) {
      apiCall("GET", "/api/group/settings", {
        gid: this.state.gid
      }).done((function(resp) {
        switch (resp.status) {
          case 0:
            return apiNotify(resp);
          case 1:
            return this.setState(update(this.state, {
              groupName: {
                $set: resp.data.name
              },
              affiliation: {
                $set: resp.data.name
              },
              settings: {
                $merge: resp.data.settings
              },
              page: {
                $set: "Register"
              }
            }));
        }
      }).bind(this));
    } else {
      apiCall("GET", "/api/team/settings").done((function(resp) {
        return this.setState(update(this.state, {
          settings: {
            $merge: resp.data
          }
        }));
      }).bind(this));
    }
    apiCall("GET", "/api/user/status").done((function(resp) {
      return this.setState(update(this.state, {
        settings: {
          $merge: resp.data
        }
      }));
    }).bind(this));
    return apiCall("GET", "/api/stats/registration").done((function(resp) {
      if (resp.status) {
        return this.setState(update(this.state, {
          regStats: {
            $set: resp.data
          }
        }));
      }
    }).bind(this));
  },
  onRegistration: function(e) {
    var form, k, ref, ref1, v;
    e.preventDefault();
    if (this.state.settings.enable_captcha && this.state.captcha === "") {
      apiNotify({
        status: 0,
        message: "ReCAPTCHA required."
      });
      return;
    }
    form = {};
    form.gid = this.state.gid;
    form.rid = this.state.rid;
    form.username = this.state.username;
    form.password = this.state.password;
    form.firstname = "-";
    form.lastname = "-";
    form.email = this.state.email;
    form.affiliation = this.state.affiliation;
    form.usertype = this.state.usertype;
    form.demo = {};
    if (this.state.demo_gender === "other") {
      this.state.demo_gender = this.state.demo_genderother;
      delete this.state.demo_genderother;
    }
    ref = this.state;
    for (k in ref) {
      v = ref[k];
      if (k.substr(0, 5) === "demo_") {
        form.demo[k.substr(5)] = v;
      }
    }
    if ((ref1 = this.state.usertype) === "student" || ref1 === "teacher") {
      form.country = form.demo.schoolcountry;
    } else {
      form.country = form.demo.residencecountry;
    }
    form['g-recaptcha-response'] = this.state.captcha;
    return apiCall("POST", "/api/user/create_simple", form).done((function(resp) {
      var verificationAlert;
      switch (resp.status) {
        case 0:
          ga('send', 'event', 'Registration', 'Form', 'Failure');
          return apiNotify(resp);
        case 1:
          ga('send', 'event', 'Registration', 'Form', 'Success');
          verificationAlert = {
            status: 1,
            message: "You should receive a verification email in a few minutes. You will need to complete this step before logging in."
          };
          if (this.state.settings.max_team_size > 1) {
            if (this.state.settings.email_verification && !this.state.rid && this.state.usertype !== "teacher") {
              apiNotify(verificationAlert);
              this.setPage("Login");
              return document.location.hash = "#team-builder";
            } else {
              apiNotify(resp);
              return this.setPage("Team Management");
            }
          } else {
            if (this.state.settings.email_verification) {
              if (!this.state.rid || this.state.rid.length === 0) {
                apiNotify(verificationAlert);
              } else {
                apiNotify(resp, "/profile");
              }
              this.setPage("Login");
              if (this.state.settings.max_team_size > 1) {
                return document.location.hash = "#team-builder";
              }
            } else {
              return apiNotify(resp, "/profile");
            }
          }
      }
    }).bind(this));
  },
  onPasswordReset: function(e) {
    e.preventDefault();
    return apiCall("POST", "/api/user/reset_password", {
      username: this.state.username
    }).done((function(resp) {
      apiNotify(resp);
      if (resp.status === 1) {
        ga('send', 'event', 'Authentication', 'ResetPassword', 'Requested');
        return this.setPage("Login");
      }
    }).bind(this));
  },
  onLogin: function(e) {
    e.preventDefault();
    return apiCall("POST", "/api/user/login", {
      username: this.state.username,
      password: this.state.password
    }).done((function(resp) {
      switch (resp.status) {
        case 0:
          return apiNotify(resp);
        case 1:
          if (document.location.hash === "#team-builder" && !resp.data.teacher) {
            return this.setPage("Team Management");
          } else {
            if (resp.data.teacher) {
              return document.location.href = "/classroom";
            } else {
              return document.location.href = "/profile";
            }
          }
      }
    }).bind(this));
  },
  setPage: function(page) {
    return this.setState(update(this.state, {
      page: {
        $set: page
      }
    }));
  },
  onRecaptchaSuccess: function(captcha) {
    return this.setState(update(this.state, {
      captcha: {
        $set: captcha
      }
    }));
  },
  onRecaptchaExpire: function() {
    return this.setState(update(this.state, {
      captcha: {
        $set: ""
      }
    }));
  },
  render: function() {
    var links, showRegStats;
    links = {
      username: this.linkState("username"),
      password: this.linkState("password"),
      email: this.linkState("email"),
      affiliation: this.linkState("affiliation"),
      usertype: this.linkState("usertype"),
      age: this.linkState("demo_age"),
      url: this.linkState("demo_url"),
      residencecountry: this.linkState("demo_residencecountry"),
      schoolcountry: this.linkState("demo_schoolcountry"),
      zipcode: this.linkState("demo_zipcode"),
      grade: this.linkState("demo_grade"),
      referrer: this.linkState("demo_referrer"),
      gender: this.linkState("demo_gender"),
      genderother: this.linkState("demo_genderother"),
      teacher_middleschool: this.linkState("demo_teacher_middleschool"),
      teacher_highschool: this.linkState("demo_teacher_highscool"),
      teacher_afterschoolclub: this.linkState("demo_teacher_afterschool"),
      teacher_homeschool: this.linkState("demo_teacher_homeschool"),
      subjectstaught: this.linkState("demo_subjectstaught"),
      parentemail: this.linkState("demo_parentemail")
    };
    showRegStats = (function() {
      if (this.state.regStats) {
        return React.createElement(Panel, null, React.createElement("h4", null, React.createElement("strong", null, "Registration Statistics")), React.createElement("p", null, React.createElement("strong", null, this.state.regStats.users), " users have registered, ", React.createElement("strong", null, this.state.regStats.teamed_users), " of\nwhich have formed ", React.createElement("strong", null, this.state.regStats.teams), " teams.", React.createElement("br", null), React.createElement("strong", null, this.state.regStats.groups), " classrooms have been created by teachers."));
      }
    }).bind(this);
    if (this.state.page === "Team Management") {
      return React.createElement("div", null, React.createElement(Row, null, React.createElement(Col, {
        "md": 6,
        "mdOffset": 3
      }, React.createElement(TeamManagementForm, null))));
    } else {
      return React.createElement("div", null, React.createElement(Row, null, React.createElement(Col, {
        "md": 6,
        "mdOffset": 3
      }, React.createElement(LoginForm, Object.assign({
        "setPage": this.setPage,
        "onRecaptchaSuccess": this.onRecaptchaSuccess,
        "onRecaptchaExpire": this.onRecaptchaExpire,
        "status": this.state.page,
        "reCAPTCHA_public_key": this.state.settings.reCAPTCHA_public_key,
        "onRegistration": this.onRegistration,
        "onLogin": this.onLogin,
        "onPasswordReset": this.onPasswordReset,
        "emailFilter": this.state.settings.email_filter,
        "groupName": this.state.groupName,
        "rid": this.state.rid,
        "gid": this.state.gid
      }, links)), showRegStats())));
    }
  }
});

$(function() {
  redirectIfLoggedIn();
  return React.render(React.createElement(AuthPanel, null), document.getElementById("auth-box"));
});
